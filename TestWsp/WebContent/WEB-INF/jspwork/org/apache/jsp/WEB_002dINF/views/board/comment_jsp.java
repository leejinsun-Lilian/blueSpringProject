/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-01-21 17:48:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class comment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\t.cWriter, .cDate {\r\n");
      out.write("    \ttext-shadow: 1px 1px 2px black;\r\n");
      out.write("\t}\r\n");
      out.write("    #comment-area {\r\n");
      out.write("        border-top: 1px solid lightgray;\r\n");
      out.write("        border-bottom: 1px solid lightgray;\r\n");
      out.write("        margin-top: 50px;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("        min-height: 400px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    table {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #comment-content-area {\r\n");
      out.write("        width: 90%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .comment-content-box {\r\n");
      out.write("        resize: none;\r\n");
      out.write("        width: 90%;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    #comment-content {\r\n");
      out.write("    \t\tresize: none;\r\n");
      out.write("        width: 90%;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    #add-comment {\r\n");
      out.write("        width: 100px;\r\n");
      out.write("\t    \ttext-align: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    li {\r\n");
      out.write("        list-style: none;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    #commentListArea {\r\n");
      out.write("    \t\tmargin : 0;\r\n");
      out.write("    \t\tpadding-left: 0;\r\n");
      out.write("    \t\tmargin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    #commentReportBtn {\r\n");
      out.write("    \t\tfloat: right;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"comment-area\">\r\n");
      out.write("        <h4>댓글</h4>\r\n");
      out.write("        \r\n");
      out.write("        <table>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td id=\"comment-content-area\">\r\n");
      out.write("                    <textarea rows=\"3\" id=\"comment-content\" class=\"comment-content-box\" placeholder=\"댓글을 작성하세요.\"></textarea>\r\n");
      out.write("                </td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <button id=\"add-comment\">\r\n");
      out.write("\t\t\t\t\t\t댓글<br>등록\r\n");
      out.write("\t\t\t\t\t</button>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("        \r\n");
      out.write("        \t<!-- 댓글 출력 부분 -->\r\n");
      out.write("\t\t\t<div class=\"commentList\">\r\n");
      out.write("\t\t\t\t<ul id=\"commentListArea\">\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<!-- 로그인 x 또는 댓글 작성자가 아닌 회원의 화면 -->\r\n");
      out.write("\t\t\t\t\t<li class=\"comment-row\">\r\n");
      out.write("\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"cWriter\">작성자</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"cDate\">작성일 : 2021년 01월 11일 10:30</p>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<p class=\"cContent\">댓글 내용1</p>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</li>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<!-- 로그인한 회원이 댓글 작성자인 경우 -->\r\n");
      out.write("\t\t\t\t\t<li class=\"comment-row\">\r\n");
      out.write("\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"cWriter\">작성자</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"cDate\">작성일 : 2021.01.11 10:30</p>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\t\t\t<p class=\"cContent\">댓글 내용2</p>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<div class=\"commentBtnArea\">\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"\" onclick=\"showUpdateComment(2, this)\">수정</button>\r\n");
      out.write("\t\t\t\t\t\t\t<button class=\"\" onclick=\"deleteComment(2)\">삭제</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("        \r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\t\t<!-- 스크립트 영역 -->\r\n");
      out.write("    <script> /*\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"*/\r\n");
      out.write("\t\t\t\tvar loginMemberId = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'; \r\n");
      out.write("\t\t\t\tvar loginMemberNo = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("        var parentBoardNo = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.boardNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("        \r\n");
      out.write("        // 페이지 로딩 완료 시 댓글 목록 호출\r\n");
      out.write("        $(function(){\r\n");
      out.write("            selectCommentList();\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        // 해당 게시글 댓글 목록 조회 함수(ajax)\r\n");
      out.write("        function selectCommentList(){\r\n");
      out.write("        \r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/selectList.do\",\r\n");
      out.write("                data : {\"parentBoardNo\" : parentBoardNo}, \r\n");
      out.write("                type : \"post\", \r\n");
      out.write("                dataType : \"JSON\", \r\n");
      out.write("                success : function(cList) {\r\n");
      out.write("                    console.log(cList);\r\n");
      out.write("                    \r\n");
      out.write("                    $(\"#commentListArea\").html(\"\");                   \r\n");
      out.write("                    \r\n");
      out.write("                    $.each(cList, function(index, item){\r\n");
      out.write("                        var li = $(\"<li>\").addClass(\"comment-row\");\r\n");
      out.write("                        var reportBtn = $(\"<button>\").text(\"신고하기\").attr(\"id\", \"commentReportBtn\").attr(\"onclick\", \"reportComment(\"+item.comNo+\")\");\r\n");
      out.write("                        var cWriter = $(\"<p>\").addClass(\"cWriter\").text(item.memberId);\r\n");
      out.write("                        var cDate = $(\"<p>\").addClass(\"cDate\").text(\"작성일 : \" + item.comCreateDate);\r\n");
      out.write("                        \r\n");
      out.write("                        var div = $(\"<div>\");\r\n");
      out.write("                        //div.append(cWriter).append(cDate);\r\n");
      out.write("                        \r\n");
      out.write("                       \tdiv.append(cWriter);\r\n");
      out.write("                        div.append(cDate);\r\n");
      out.write("                       \t\r\n");
      out.write("                        if(item.memberId != loginMemberId) {\r\n");
      out.write("                        \tdiv.append(reportBtn);\r\n");
      out.write("                        }\r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                        var cContent = $(\"<p>\").addClass(\"cContent\").html(item.comContent);\r\n");
      out.write("                        \r\n");
      out.write("                        li.append(div).append(cContent);                     \r\n");
      out.write("                        \r\n");
      out.write("                        // 현재 댓글의 작성자와 로그인한 멤버의 아이디가 같을 때 버튼 추가\r\n");
      out.write("/*                      console.log(item.memberId);\r\n");
      out.write("                        console.log(loginMemberId); */\r\n");
      out.write("                        if(item.memberId == loginMemberId){\r\n");
      out.write("                            // console.log(item.memberId);\r\n");
      out.write("                            // 댓글, 수정, 삭제 버튼 영역\r\n");
      out.write("                            var commentBtnArea = $(\"<div>\").addClass(\"commentBtnArea\");\r\n");
      out.write("                            \r\n");
      out.write("                            // ** 추가되는 댓글에 onclick 이벤트를 부여하여 버튼 클릭 시 수정, 삭제를 수행할 수 있는 함수를 이벤트 핸들러로 추가함. \r\n");
      out.write("                            var showUpdate = $(\"<button>\").addClass(\"\").text(\"수정\").attr(\"onclick\", \"showUpdateComment(\"+item.comNo+\", this)\");\r\n");
      out.write("                            var deleteComment = $(\"<button>\").addClass(\"\").text(\"삭제\").attr(\"onclick\", \"deleteComment(\"+item.comNo+\")\");\r\n");
      out.write("                            \r\n");
      out.write("                            commentBtnArea.append(showUpdate).append(deleteComment);\r\n");
      out.write("                            \r\n");
      out.write("                            li.append(commentBtnArea);\r\n");
      out.write("                        }\r\n");
      out.write("        \r\n");
      out.write("                        \r\n");
      out.write("                        $(\"#commentListArea\").append(li).append($(\"<hr>\"));\r\n");
      out.write("                        \r\n");
      out.write("                        \r\n");
      out.write("                    });\r\n");
      out.write("                    \r\n");
      out.write("                }, \r\n");
      out.write("                error : function(request, status, error) {\r\n");
      out.write("                \talert(\"code = \"+ request.status + \" message = \" + request.responseText + \" error = \" + error); // 실패 시 처리\r\n");
      out.write("                }\t\t\r\n");
      out.write("            })           \r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("    // 댓글 등록 함수\r\n");
      out.write("  \t$(\"#add-comment\").on(\"click\", function() {\r\n");
      out.write("  \t\tvar commentContent = $(\"#comment-content\").val().trim();\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t\t// 로그인 안되있으면\r\n");
      out.write("  \t\tif(loginMemberId == \"\") {\r\n");
      out.write("  \t\t\talert(\"로그인이 되어있어야 댓글을 작성할 수 있습니다.\");\r\n");
      out.write("  \t\t\t\r\n");
      out.write("  \t\t} else { // 로그인이 되어있다면\r\n");
      out.write("  \t\t\t\r\n");
      out.write("  \t\t\tif(commentContent.length == 0) {\r\n");
      out.write("  \t\t\t\talert(\"한 글자 이상 입력하셔야 합니다.\")\r\n");
      out.write("  \t\t\t\t\r\n");
      out.write("  \t\t\t} else {\r\n");
      out.write("  \t\t\t\t// ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("  \t\t\t\tvar commentWriter = loginMemberNo;\r\n");
      out.write("  \t\t\t\t\r\n");
      out.write("  \t\t\t\t$.ajax({\r\n");
      out.write("  \t\t\t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/insertComment.do\",\r\n");
      out.write("  \t\t\t\t\tdata : {\"commentWriter\" : commentWriter,\r\n");
      out.write("  \t\t\t\t\t\t\t\t\t\"commentContent\" : commentContent,\r\n");
      out.write("  \t\t\t\t\t\t\t\t\t\"parentBoardNo\" : parentBoardNo},\r\n");
      out.write("  \t\t\t\t\ttype : \"post\", \r\n");
      out.write("  \t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("  \t\t\t\t\t\t\r\n");
      out.write("  \t\t\t\t\t\tif(result > 0) {\r\n");
      out.write("  \t\t\t\t\t\t\t$(\"#comment-content\").val(\"\");\r\n");
      out.write("  \t\t\t\t\t\t\t\r\n");
      out.write("  \t\t\t\t\t\t\tswal({\"icon\" : \"success\", \"title\" : \"댓글 등록 성공\"});\r\n");
      out.write("  \t\t\t\t\t\t\t\r\n");
      out.write("  \t\t\t\t\t\t\tselectCommentList();\r\n");
      out.write("  \t\t\t\t\t\t}\r\n");
      out.write("  \t\t\t\t\t\t\r\n");
      out.write("  \t\t\t\t\t},\r\n");
      out.write("  \t\t\t\t\terror : function(request, status, error) {\r\n");
      out.write("  \t          alert(\"code = \"+ request.status + \" message = \" + request.responseText + \" error = \" + error); // 실패 시 처리\r\n");
      out.write("  \t        }\t\r\n");
      out.write("  \t\t\t\t});\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t\t\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t\t\r\n");
      out.write("  \t});\r\n");
      out.write("    \r\n");
      out.write("    // 댓글 수정 영역 관련(수정 창이 중복으로 뜨지 않게)\r\n");
      out.write("    var beforeCommentRow; // 원래의 댓글 내용\r\n");
      out.write("    \r\n");
      out.write("    function showUpdateComment(commentNo, element) {\r\n");
      out.write("    \tif($(\".commentUpdateContent\").length > 0) { // 배열의 개수를 나타내는구나\r\n");
      out.write("    \t\t$(\".commentUpdateContent\").eq(0).parent().html(beforeCommentRow); //eq(0) : 배열의 0번째 있는 애\r\n");
      out.write("    \t}\r\n");
      out.write("    \t\r\n");
      out.write("    \tbeforeCommentRow = $(element).parent().parent().html(); // 부모의 내용 전체 담아놓기\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar beforeContent = $(element).parent().prev().html(); // 부모의 바로 앞에 있는 요소의 html 담기 (즉, 댓글 내용 담기)\r\n");
      out.write("    \t\r\n");
      out.write("    \t// 이전 댓글 내용의 크로스사이트 스크립트 처리 해제, 개행문자 변경\r\n");
      out.write("    \t// -> 자바스크립트에는 replaceAll() 메소드가 없으므로 정규 표현식을 이용하여 변경\r\n");
      out.write("    \tbeforeContent = beforeContent.replace(/&amp;/g, \"&\");\t\r\n");
      out.write("    \tbeforeContent = beforeContent.replace(/&lt;/g, \"<\");\t\r\n");
      out.write("    \tbeforeContent = beforeContent.replace(/&gt;/g, \">\");\t\r\n");
      out.write("    \tbeforeContent = beforeContent.replace(/&quot;/g, \"\\\"\");\t\r\n");
      out.write("    \t\r\n");
      out.write("    \tbeforeContent = beforeContent.replace(/<br>/g, \"\\n\");\t\r\n");
      out.write("    \t\r\n");
      out.write("    \t// prev()는 선택, bofore()는 추가!\r\n");
      out.write("    \t$(element).parent().prev().remove();\r\n");
      out.write("    \tvar textarea = $(\"<textarea>\").addClass(\"commentUpdateContent comment-content-box\").attr(\"rows\", \"3\").text(beforeContent);\r\n");
      out.write("    \t$(element).parent().before(textarea);\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar updateComment = $(\"<button>\").addClass(\"\").text(\"수정 하기\").attr(\"onclick\", \"updateComment(\" + commentNo + \", this)\");    \t\r\n");
      out.write("    \tvar cancelUpdate = $(\"<button>\").addClass(\"\").text(\"수정 취소\").attr(\"onclick\", \"updateCancel(this)\");\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar commentBtnArea = $(element).parent();\r\n");
      out.write("    \t\r\n");
      out.write("    \t$(commentBtnArea).empty();\r\n");
      out.write("    \t$(commentBtnArea).append(updateComment); \r\n");
      out.write("    \t$(commentBtnArea).append(cancelUpdate);\r\n");
      out.write("    \t\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 수정 폼에서 수정 하기 클릭 시\r\n");
      out.write("    function updateComment(commentNo, element) {\r\n");
      out.write("    \tvar afterCommentContent = $(element).parent().prev().val();\r\n");
      out.write("    \t\r\n");
      out.write("    \t$.ajax({\r\n");
      out.write("    \t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/updateComment.do\",\r\n");
      out.write("    \t\tdata : {\"commentNo\" : commentNo ,\r\n");
      out.write("    \t\t\t\t\t\t\"afterCommentContent\" : afterCommentContent},\r\n");
      out.write("    \t\ttype : \"post\",\r\n");
      out.write("    \t\tsuccess : function(result) {\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t\tif(result > 0) {\r\n");
      out.write("    \t\t\t\tselectCommentList(parentBoardNo); // 질문하기\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \t\t\t\tswal({\"icon\" : \"success\" , \"title\" : \"댓글이 수정되었습니다.\"});\r\n");
      out.write("    \t\t\t}    \t\t\t\r\n");
      out.write("    \t\t}, \r\n");
      out.write("    \t\terror : function(request, status, error) {\r\n");
      out.write("    \t      alert(\"code = \"+ request.status + \" message = \" + request.responseText + \" error = \" + error); // 실패 시 처리\r\n");
      out.write("    \t\t}\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t});\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 수정 폼에서 수정 취소 클릭 시\r\n");
      out.write("    function updateCancel(element) {\r\n");
      out.write("    \t$(element).parent().parent().html(beforeCommentRow);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 댓글 삭제\r\n");
      out.write("    function deleteComment(commentNo) {\r\n");
      out.write("    \tif(confirm(\"댓글을 정말로 삭제하시겠습니까?\")) {\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t\t$.ajax({\r\n");
      out.write("    \t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/comment/deleteComment.do\",\r\n");
      out.write("    \t\t\tdata : {\"commentNo\": commentNo}, \r\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tif(result > 0) {\r\n");
      out.write("\t\t\t\t\t\t\tselectCommentList(parentBoardNo);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tswal({\"icon\" : \"success\" , \"title\" : \"댓글이 삭제되었습니다.\"});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}, \r\n");
      out.write("      \t\terror : function(request, status, error) {\r\n");
      out.write("       \t      alert(\"code = \"+ request.status + \" message = \" + request.responseText + \" error = \" + error); // 실패 시 처리\r\n");
      out.write("       \t\t}    \t\t\t\r\n");
      out.write("    \t\t\t\r\n");
      out.write("    \t\t});\r\n");
      out.write("    \t}\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 댓글 신고 \r\n");
      out.write("    function reportComment(commentNo){\r\n");
      out.write("\t\t\tif(window.confirm(\"보고 있는 댓글을 신고하시겠습니까?\")) {\r\n");
      out.write("\t\t\t\t/* $(board.memberId); */\r\n");
      out.write("\t\t\t\tvar memberId = 3;\r\n");
      out.write("\t\t\t\tvar target = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("\t\t\t\tvar comNo = commentNo;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar url = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/commentReportForm.do?comNo=\" + comNo + \"&memNo=\" + memberId + \"&target=\" + target;\r\n");
      out.write("\t\t\t\tvar title = \"신고하기\";\r\n");
      out.write("\t\t\t\tvar option = \"width = 700, height = 400, top = 300, left = 600, location = no\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\twindow.open(url, title, option);\r\n");
      out.write("\t\t\t}    \t\r\n");
      out.write("    };\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
